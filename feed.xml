<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://esgn.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://esgn.github.io/" rel="alternate" type="text/html" /><updated>2022-10-03T08:09:44+00:00</updated><id>https://esgn.github.io/feed.xml</id><title type="html">esgn posts</title><subtitle>Information I found useful at some point and which may be of use to others. Programming, Networking, DevSecOps, and other tech related topics.</subtitle><entry><title type="html">Using tags with jekyll minima v2 default theme</title><link href="https://esgn.github.io/2022/09/22/Use-tags-with-jekyll-minima.html" rel="alternate" type="text/html" title="Using tags with jekyll minima v2 default theme" /><published>2022-09-22T07:14:43+00:00</published><updated>2022-09-22T07:14:43+00:00</updated><id>https://esgn.github.io/2022/09/22/Use-tags-with-jekyll-minima</id><content type="html" xml:base="https://esgn.github.io/2022/09/22/Use-tags-with-jekyll-minima.html"><![CDATA[<p>I was looking for a simple way to write notes while working on different projects. I never touched a Ruby project before, so why not give <a href="https://jekyllrb.com/" target="_blank">Jekyll</a> a try. The default <code class="language-plaintext highlighter-rouge">minima</code> theme is good enough for displaying blog posts. The only missing feature was the ability to tag posts and browse posts using tags while using GitHub pages.</p>

<p>Some people already tried their hands on this feature and they were very useful introductions to the subject:</p>
<ul>
  <li><a href="http://longqian.me/2017/02/09/github-jekyll-tag/" target="_blank">http://longqian.me/2017/02/09/github-jekyll-tag/</a></li>
  <li><a href="https://rfong.github.io/rflog/2020/02/28/jekyll-tags/" target="_blank">https://rfong.github.io/rflog/2020/02/28/jekyll-tags/</a></li>
  <li><a href="http://www.jasonemiller.org/2020/12/23/tagging-posts-in-jekyll-minima.html" target="_blank">http://www.jasonemiller.org/2020/12/23/tagging-posts-in-jekyll-minima.html</a></li>
</ul>

<p>Be aware this post uses the minima theme in its v2.5.1 version (current release at time of writing). A v3 version is brewing here <a href="https://github.com/jekyll/minima" target="_blank">https://github.com/jekyll/minima</a> but a release is still pending.</p>

<h2 id="jekyll-theme">Jekyll theme</h2>

<p>Jekyll uses the <a href="https://shopify.github.io/liquid/" target="_blank">Liquid templating language</a> created by <a href="https://www.shopify.com/" target="_blank">Shopify</a> written in <a href="https://www.ruby-lang.org/en/" target="_blank">Ruby</a> to process templates.</p>

<p>Overriding Jekyll theme defaults is explained in its official documentation <a href="http://jekyllrb.com/docs/themes/#overriding-theme-defaults" target="_blank">here</a>. It’s as simple as: copy-paste the file from the original theme you wish to modify and put it either in <code class="language-plaintext highlighter-rouge">_layouts/</code> or <code class="language-plaintext highlighter-rouge">_includes/</code> depending where the file was originaly situated.</p>

<h2 id="adding-tags-to-post">Adding tags to post</h2>

<p>Jekyll extracts post metadata from <a href="https://jekyllrb.com/docs/front-matter/" target="_blank">Front Matter</a> header. Front Matter variables are extensible and can be access via Liquid. So let’s add a <code class="language-plaintext highlighter-rouge">tags</code> variable to our post Front Matter header. We’ll stick to <code class="language-plaintext highlighter-rouge">[\d\w-]+</code> for tag naming.</p>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown"><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span>  <span class="s2">"</span><span class="s">Using</span><span class="nv"> </span><span class="s">tags</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">jekyll</span><span class="nv"> </span><span class="s">minima</span><span class="nv"> </span><span class="s">default</span><span class="nv"> </span><span class="s">theme"</span>
<span class="na">date</span><span class="pi">:</span>   <span class="s">2022-09-22 9:14:43 +0200</span>
<span class="na">tags</span><span class="pi">:</span> <span class="s">jekyll liquid another-tag</span>
<span class="nn">---</span></code></pre></figure>

<p>Then we need to copy the original <code class="language-plaintext highlighter-rouge">post.html</code> layout file from minima theme to a <code class="language-plaintext highlighter-rouge">_layouts/</code> directory local to our project and edit it as follows (copy paste the block between HTML comments):</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"post-header"</span><span class="nt">&gt;</span>
    ...
      {%- if page.author -%}
      • <span class="nt">&lt;span</span> <span class="na">itemprop=</span><span class="s">"author"</span> <span class="na">itemscope</span> <span class="na">itemtype=</span><span class="s">"http://schema.org/Person"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"p-author h-card"</span> <span class="na">itemprop=</span><span class="s">"name"</span><span class="nt">&gt;</span>{{ page.author }}<span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;/span&gt;</span>
      {%- endif -%}

      <span class="c">&lt;!-- Add tags to post header start --&gt;</span>
      {% if page.tags.size &gt; 0 %}
      <span class="nt">&lt;span</span> <span class="na">itemprop=</span><span class="s">"keywords"</span><span class="nt">&gt;</span>
        {% for tag in page.tags %}
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ site.baseurl }}/tag/{{ tag }}"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;code&gt;</span>
            <span class="nt">&lt;small&gt;</span>{{ tag }}<span class="nt">&lt;/small&gt;</span>
          <span class="nt">&lt;/code&gt;</span>
        <span class="nt">&lt;/a&gt;</span>
        {% endfor %}
      <span class="nt">&lt;/span&gt;</span>
      {% endif %}
      <span class="c">&lt;!-- Add tags to post header end --&gt;</span>

    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/header&gt;</span>
    ...</code></pre></figure>

<p>Here we create, for each tag present in the post header, a link to a tag page (yet to be defined). Pretty straightforward.</p>

<h2 id="creating-tag-page-template">Creating tag page template</h2>

<p>Let’s define the template for the tag page that will display all the posts available with a given tag. We do this by adding a <code class="language-plaintext highlighter-rouge">tagpage.html</code> file with the following code in the <code class="language-plaintext highlighter-rouge">_layouts/</code> directory of our project.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">---
layout: default
---

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Tag: {{ page.tag }}<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      {% for post in site.posts %}
        {% if post.tags contains page.tag %}
        <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ post.url }}"</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;</span> ({{ post.date | date_to_string }})
        <span class="nt">&lt;/li&gt;</span>
        {% endif %}
      {% endfor %}
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>Here we simply iterate over all site posts and display the ones containing the tag targeted by the page.</p>

<h2 id="creating-markdown-page-for-each-tag">Creating markdown page for each tag</h2>

<p>Finaly we have to create a <code class="language-plaintext highlighter-rouge">tag/</code> directory in our project and put a markdown file in it for each tag used on our website. Of course we’re not going to do this manually.</p>

<p>Below is a trimmed down version of existing scripts using regular expression to grab the tags in post files.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#!/usr/bin/env python3
# coding: utf-8
</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">shutil</span>

<span class="n">tag_page_content</span> <span class="o">=</span> <span class="s">'''---
layout: tagpage
tag: {tag}
robots: noindex
---'''</span>

<span class="n">tag_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">tag_dir</span> <span class="o">=</span> <span class="s">"tag"</span>
<span class="n">posts_dir</span> <span class="o">=</span> <span class="s">"_posts"</span>
<span class="n">md_ext</span> <span class="o">=</span> <span class="p">(</span><span class="s">'.md'</span><span class="p">,</span> <span class="s">'.markdown'</span><span class="p">)</span>
<span class="n">rgxp</span> <span class="o">=</span> <span class="sa">r</span><span class="s">'---[\s\S]*?tags:(.*)[\s\S]*?---'</span>

<span class="c1"># wipe up and recreate tag dir
</span><span class="n">shutil</span><span class="p">.</span><span class="n">rmtree</span><span class="p">(</span><span class="n">tag_dir</span><span class="p">,</span> <span class="n">ignore_errors</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">tag_dir</span><span class="p">)</span>

<span class="c1"># Get unique tags from post
</span><span class="k">for</span> <span class="n">post</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">posts_dir</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">post</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="n">md_ext</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">posts_dir</span><span class="p">,</span> <span class="n">post</span><span class="p">))</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">rgxp</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">read</span><span class="p">(),</span> <span class="n">re</span><span class="p">.</span><span class="n">MULTILINE</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">:</span>
            <span class="n">tag_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">tag_list</span> <span class="o">+</span> <span class="n">s</span><span class="p">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>

<span class="c1"># Create tag markdown pages
</span><span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">tag_list</span><span class="p">:</span>
    <span class="k">with</span>  <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">tag_dir</span><span class="p">,</span> <span class="n">tag</span><span class="o">+</span><span class="s">".md"</span><span class="p">),</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">tag_page_content</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">tag</span><span class="o">=</span><span class="n">tag</span><span class="p">))</span></code></pre></figure>

<h2 id="adding-tag-cloud">Adding tag cloud</h2>

<p>Displaying the list of available tags on the tag pages seems like a reasonable idea. Former solutions rely on a big block of code. It can actually be written more effectively by using Liquid filters.</p>

<p>To add the list of all available tags to the tag pages, just append the following block before the end of the main <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> in <code class="language-plaintext highlighter-rouge">tagpage.html</code></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post"</span><span class="nt">&gt;</span>

  ...

  <span class="c">&lt;!-- Add tag cloud start --&gt;</span>
  <span class="nt">&lt;h2&gt;</span>All tags<span class="nt">&lt;/h2&gt;</span>
  {% assign tags = site.posts | map: "tags" | compact | uniq | sort %}
  {% for tag in tags %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tag/{{ tag }}"</span><span class="nt">&gt;&lt;code&gt;&lt;small&gt;</span>{{ tag }}<span class="nt">&lt;/small&gt;&lt;/code&gt;&lt;/a&gt;</span>
  {% endfor %}
  <span class="c">&lt;!-- Add tag cloud end --&gt;</span>

<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">map</code> creates a list from all tags in <code class="language-plaintext highlighter-rouge">site.posts</code>, <code class="language-plaintext highlighter-rouge">compact</code> removes <code class="language-plaintext highlighter-rouge">nil</code> values from the list and <code class="language-plaintext highlighter-rouge">uniq</code> removes duplicates from the list. <code class="language-plaintext highlighter-rouge">sort</code> simply sort the resulting list. You may want to have a look at <a href="https://shopify.github.io/liquid/filters/" target="_blank">Liquid filters</a> to discover more useful features of Liquid.</p>

<h2 id="adding-tag-to-home-page-post-list">Adding tag to home page post list</h2>

<p>As a final touch to this patch, I also wanted tags to be directly visible in the post listings on the home page. Once again, we just have to copy-paste the original <code class="language-plaintext highlighter-rouge">home.html</code> in <code class="language-plaintext highlighter-rouge">_layouts/</code> and add the following snippet to it (see code between HTML comments).</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">{%- if site.posts.size &gt; 0 -%}
  <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">"post-list-heading"</span><span class="nt">&gt;</span>{{ page.list_title | default: "Posts" }}<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"post-list"</span><span class="nt">&gt;</span>
    {%- for post in site.posts -%}
    <span class="nt">&lt;li&gt;</span>
      {%- assign date_format = site.minima.date_format | default: "%b %-d, %Y" -%}
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"post-meta"</span><span class="nt">&gt;</span>{{ post.date | date: date_format }}<span class="nt">&lt;/span&gt;</span>

      <span class="c">&lt;!-- display tags in post list start--&gt;</span>
      {% if post.tags.size &gt; 0 %}
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"post-meta"</span><span class="nt">&gt;&lt;/span&gt;</span>
          {% for tag in post.tags %}
          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ site.baseurl }}/tag/{{ tag }}"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;code&gt;</span>
              <span class="nt">&lt;small&gt;</span>{{ tag }}<span class="nt">&lt;/small&gt;</span>
            <span class="nt">&lt;/code&gt;</span>
          <span class="nt">&lt;/a&gt;</span>
          {% endfor %}
        <span class="nt">&lt;/span&gt;</span>
      {% endif %}
      <span class="c">&lt;!-- display tags in post list end--&gt;</span>

      <span class="nt">&lt;h3&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"post-link"</span> <span class="na">href=</span><span class="s">"{{ post.url | relative_url }}"</span><span class="nt">&gt;</span>
          {{ post.title | escape }}
        <span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/h3&gt;</span>
        ...</code></pre></figure>

<h2 id="conclusion">Conclusion</h2>

<p>For more context about this solution, you may want to have a look to this website <a href="https://github.com/esgn/esgn.github.io">repository</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[How to support tags and tags browsing in Jekyll default minima v2 theme using GitHub pages.]]></summary></entry><entry><title type="html">Ansible naming conventions</title><link href="https://esgn.github.io/2022/09/20/ansible-naming-conventions.html" rel="alternate" type="text/html" title="Ansible naming conventions" /><published>2022-09-20T13:14:43+00:00</published><updated>2022-09-20T13:14:43+00:00</updated><id>https://esgn.github.io/2022/09/20/ansible-naming-conventions</id><content type="html" xml:base="https://esgn.github.io/2022/09/20/ansible-naming-conventions.html"><![CDATA[<p>Having understood the default <a href="https://docs.ansible.com/ansible/2.8/user_guide/playbooks_best_practices.html#directory-layout" target="_blank">Ansible directory layout</a> and discovered ansible-galaxy can create part of this layout automatically (e.g for a role: <code class="language-plaintext highlighter-rouge">ansible-galaxy init test-role</code>), remains the question of naming conventions in Ansible.<br />
<br />
Here’s what could be found in Ansible related documentation:</p>

<ul>
  <li>Roles name
    <ul>
      <li>From Ansible Galaxy documentation (<a href="https://galaxy.ansible.com/docs/contributing/creating_role.html#role-names" target="_blank">source</a>): <code class="language-plaintext highlighter-rouge">Role names are limited to lowercase word characters (i.e., a-z, 0-9) and ‘_’. No special characters are allowed, including ‘.’, ‘-‘, and space</code>.</li>
      <li>From Ansible devel documentation (<a href="https://docs.ansible.com/ansible/devel/dev_guide/developing_collections_structure.html#roles-directory" target="_blank">source</a>) as spotted by Ansible Lint documentation (<a href="https://ansible-lint.readthedocs.io/rules/role-name/" target="_blank">source</a>): <code class="language-plaintext highlighter-rouge">Role names are now limited to contain only lowercase alphanumeric characters, plus _ and start with an alpha character</code>.<br />
<br /></li>
    </ul>
  </li>
  <li>Variables name:
    <ul>
      <li>From Ansible documentation (<a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#creating-valid-variable-names" target="_blank">source</a>): <code class="language-plaintext highlighter-rouge">A variable name can only include letters, numbers, and underscores. Python keywords or playbook keywords are not valid variable names. A variable name cannot begin with a number. Variable names can begin with an underscore. In many programming languages, variables that begin with an underscore are private. This is not true in Ansible</code>.</li>
      <li>From Ansible lint documentation (<a href="https://ansible-lint.readthedocs.io/rules/var-naming/" target="_blank">source</a>): <code class="language-plaintext highlighter-rouge">All variables should be named using only lowercase and underscores</code>.</li>
      <li>Regarding variable names many third party sources recommend to prepend variable used in a role with the role name (e.g <code class="language-plaintext highlighter-rouge">apache_max_keepalive</code>).<br />
<br /></li>
    </ul>
  </li>
  <li>Yaml files name:
    <ul>
      <li>For tasks, playbook and other yaml files, I was not able to find a proper naming convention.</li>
      <li>From Ansible lint documentation (<a href="https://ansible-lint.readthedocs.io/rules/playbook-extension/" target="_blank">source</a>) <code class="language-plaintext highlighter-rouge">Playbooks should have the ".yml" or ".yaml" extension</code>.</li>
      <li>From this Ansible documentation example (<a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html#ansible-lint" target="_blank">source</a>), it seems playbook file names may include a <code class="language-plaintext highlighter-rouge">-</code> 🤔<br />
<br /></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">name:</code> keys in tasks and playbooks yaml files:
    <ul>
      <li>From Ansible Lint (<a href="https://ansible-lint.readthedocs.io/rules/name/" target="_blank">source</a>): <code class="language-plaintext highlighter-rouge">All names should start with an uppercase letter for languages that support it</code>. Here <code class="language-plaintext highlighter-rouge">language</code> obviously means natural human languages (english, german, french, …).
<br /></li>
    </ul>
  </li>
</ul>

<p>Sticking to <a href="https://en.wikipedia.org/wiki/Snake_case" target="_blank">snake-case</a> should be the best solution when working with Ansible. No surprises for a Python project.</p>]]></content><author><name></name></author><category term="ansible" /><category term="coding-conventions" /><summary type="html"><![CDATA[A quick look at what can be found in Ansible related documentation regarding naming conventions (roles, tasks, ...)]]></summary></entry></feed>